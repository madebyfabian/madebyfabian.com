---
import editorjsHTML from 'editorjs-html'
import { stringToHtmlId } from '../utils/formatDate'
import { generateAssetUrl, type FetchSingleArticleResult } from '../lib/directus'

type Item = {
	content: string
	items: Item[]
}

const renderList = (items: Item[], style: 'unordered' | 'ordered'): string => {
	const tag = style === 'unordered' ? 'ul' : 'ol'
	return `<${tag}>
		${items
			.map(item => {
				return `<li>
					<p>${item.content}</p>
					${item.items.length > 0 ? renderList(item.items, style) : ''}
				</li>`
			})
			.join('')}
	</${tag}>`
}

const parser = editorjsHTML({
	header: block => {
		const data = block.data
		const id = stringToHtmlId(data.text)
		return `<h${data.level} ${data.level === 2 ? `id="${id}"` : ''}>${data.text}</h${data.level}>`
	},
	raw: block => {
		return block.data.html
	},
	nestedlist: block => {
		const data = block.data
		return renderList(data.items, data.style)
	},
	image: block => {
		const data = block.data

		const file = {
			id: data.file.fileId,
			filename_download: data.file.name,
		}

		const urlMobile = generateAssetUrl(file, { width: 800, v: data.file.size })
		const urlDesktop = generateAssetUrl(file, { width: 1500, v: data.file.size })

		const caption = data.caption === '' || data.caption === '<br>' ? null : data.caption

		return `<figure>
			<div>
				<picture>
					<source srcset="${urlMobile}" media="(max-width: 800px)">
					<img 
						src="${urlDesktop}" alt="${caption || data.file.title || ''}"
						${caption ? `title="${caption}"` : ''}
						width="${data.file.width}"
						height="${data.file.height}"
						loading="lazy"
					>
				</picture>
			</div>
			${caption ? `<figcaption>${caption}</figcaption>` : ''}
		</figure>`
	},
})

type Props = {
	content_blocks: FetchSingleArticleResult['content_blocks']
}

const { content_blocks } = Astro.props

const html = content_blocks ? parser.parse(content_blocks) : ''
---

<div class='RichtextRenderer' set:html={html} />

<style scoped>
	.RichtextRenderer {
		display: flow-root;
		font-size: var(--text-xl);
		letter-spacing: -0.03em;
		line-height: 1.5;
		text-wrap: pretty;
	}

	.RichtextRenderer :global(> *) {
		margin: calc(var(--spacing) * 5) 0;
	}

	.RichtextRenderer :global(> *:first-child) {
		margin-top: 0;
	}

	.RichtextRenderer :global(> *:last-child) {
		margin-bottom: 0;
	}

	.RichtextRenderer :global(h2) {
		scroll-margin-top: calc(var(--spacing) * 8);
		margin-top: calc(var(--spacing) * 12);
		margin-bottom: calc(var(--spacing) * 7);
		font-weight: 400;
	}

	.RichtextRenderer :global(h3) {
		margin-top: calc(var(--spacing) * 10);
		margin-bottom: calc(var(--spacing) * 6);
		font-weight: 400;
	}

	.RichtextRenderer :global(h4) {
		margin-top: calc(var(--spacing) * 8);
		margin-bottom: calc(var(--spacing) * 5);
		font-weight: 400;
	}

	.RichtextRenderer :global(a) {
		text-decoration-line: underline;

		/* These are technically the same, but use both */
		overflow-wrap: break-word;
		word-wrap: break-word;

		word-break: break-word;

		/* Adds a hyphen where the word breaks, if supported (No Blink) */
		hyphens: auto;
	}

	.RichtextRenderer :global(figure) {
		margin: calc(var(--spacing) * 7) 0;
	}

	.RichtextRenderer :global(figure > div) {
		overflow: hidden;
		border-radius: var(--radius-3xl);
		border: 1px solid var(--color-primary);
		box-shadow: var(--shadow-primary-small);
	}

	.RichtextRenderer :global(figure img) {
		display: block;
		border-radius: var(--radius-3xl);
		border: 4px solid var(--color-secondary);
	}

	.RichtextRenderer :global(figcaption) {
		margin-top: calc(var(--spacing) * 3);
	}

	.RichtextRenderer :global(code.inline-code) {
		padding: calc(var(--spacing) * 0.5) calc(var(--spacing) * 2);
		margin: calc(var(--spacing) * -0.5) 0;
		border-radius: 9999px;
		border: 1px solid var(--color-primary);
		background-color: var(--color-secondary);
		font-size: var(--text-base);
	}

	.RichtextRenderer :global(pre) {
		tab-size: 2;
		padding: calc(var(--spacing) * 4) calc(var(--spacing) * 6);
		border-radius: var(--radius-3xl);
		background-color: var(--color-secondary);
		border: 1px solid var(--color-primary);
		box-shadow: var(--shadow-primary-small);
		margin-bottom: calc(var(--spacing) * 7);
		line-height: 1.15;
		overflow-x: auto;
		width: 100%;
		max-width: calc(100vw - calc(var(--spacing) * 3) * 2);
	}

	.RichtextRenderer :global(pre code) {
		font-size: var(--text-base);
	}

	.RichtextRenderer :global(ul),
	.RichtextRenderer :global(ol) {
		margin-left: calc(var(--spacing) * 5);
	}

	.RichtextRenderer :global(li p) {
		margin: calc(var(--spacing) * 2) 0;
	}

	.RichtextRenderer :global(ul) {
		list-style: circle;
	}

	.RichtextRenderer :global(hr) {
		margin: calc(var(--spacing) * 12) 0;
	}
</style>
